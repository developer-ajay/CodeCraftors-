#1. What is a class in Python, and how is it defined in code?
    ## In python class is a blueprint and it also gives you basic structure of a code.
    ## it can define using "class" and we can also add objectives and attributes inside the class.

#2. Explain the difference between instance attributes and class attributes in Python. Provide examples.
    ## instance attributes are the attributes using after _init_ and all the instances are different. eg:colour,mirror...
    ## class attributes are the attributes using inside the class and all instances are same.  eg; tyre=4

#3. What role does the `__init__` method serve in a Python class? How is it used to initialize attributes?
    ## the _init_ method is also called as constructor. we can define it "_init_".

#4.  Describe the purpose of the `self` parameter in class methods and explain its importance.
    ## self parameter i class method helps to access the attributes and methods from the class. without 'self'parameter its very hard to call the instances.

#5.  What is the difference between static methods and class methods in Python? How are they defined?
    ## class methods are the methods used to operate class itself.but static method do not operate class and its instances.

#6.  How does inheritance work in Python, and why is it useful in object-oriented programming?
    ## inheritance work in python like parent and child. the childclass can access the parentclass.

#7.  Define encapsulation in Python. How is encapsulation implemented in Python classes, and what benefits does it provide?
    ## Encapsulation in Python is the practice of bundling data and methods into a single class while restricting direct access to certain component
    ## benefits of encapsulations are data protection,controlled access..


#8. Explain the concept of polymorphism in Python. How does Python support polymorphism through method overriding?
    ## polymorphism is one of the concept of oops. it is mainly like a parent and child relation.

#9. What are special methods (also known as "magic methods") in Python, and why are they used? Give examples of common special methods.
    ## special method can define (_) at the beginning and end of the name. it provide a meaningful behaviour
    ## eg: _str_,_init_....

#10.   Why is it beneficial to use object-oriented programming (OOP) in Python? Discuss how classes, methods,
#and inheritance contribute to code modularity and reusability.
    ## oops provide a structure and its easy to reuse.